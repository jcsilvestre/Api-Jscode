version: '3.8'

services:
  # PostgreSQL Database - Development
  postgres:
    image: postgres:15-alpine
    container_name: jcscode-dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: jcscode_dev
      POSTGRES_USER: jcscode
      POSTGRES_PASSWORD: dev123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - jcscode-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jcscode -d jcscode_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache - Development
  redis:
    image: redis:7-alpine
    container_name: jcscode-dev-redis
    restart: unless-stopped
    command: redis-server --requirepass dev123
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - jcscode-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NestJS Application - Development with Hot Reload
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: jcscode-dev-api
    command: npm run dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=jcscode
      - DB_PASSWORD=dev123
      - DB_DATABASE=jcscode_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=dev123
    env_file:
      - .env.development
    volumes:
      # Hot reload - mount source code
      - ./src:/app/src:cached
      - ./test:/app/test:cached
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./tsconfig.build.json:/app/tsconfig.build.json:ro
      - ./nest-cli.json:/app/nest-cli.json:ro
      - ./ormconfig.ts:/app/ormconfig.ts:ro
      # Node modules volume for performance
      - node_modules_cache:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - jcscode-dev-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Enable debugging
    stdin_open: true
    tty: true

  # Adminer - Database Administration Tool
  adminer:
    image: adminer:4-standalone
    container_name: jcscode-dev-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    depends_on:
      - postgres
    networks:
      - jcscode-dev-network

  # Redis Commander - Redis Administration Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: jcscode-dev-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev123
      HTTP_USER: admin
      HTTP_PASSWORD: dev123
    depends_on:
      - redis
    networks:
      - jcscode-dev-network

  # MailHog - Email Testing Tool
  mailhog:
    image: mailhog/mailhog:latest
    container_name: jcscode-dev-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - jcscode-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  node_modules_cache:
    driver: local

networks:
  jcscode-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16